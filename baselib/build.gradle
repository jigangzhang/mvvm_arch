apply plugin: 'com.android.library'

android {
    compileSdkVersion build_version.compileSdkVersion

    defaultConfig {
        minSdkVersion build_version.minSdkVersion
        targetSdkVersion build_version.targetSdkVersion
        versionCode build_version.versionCode
        versionName build_version.versionName

        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'    // 设置支持的SO库架构
        }
    }

//    multiDexKeepFile {
//
//    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

task resolveDependencies {
    doLast {
//        configurations["api"].dependencies.forEach({
//            print("dependency: ")
//            println(it)
//        })
//        configurations.forEach({
//            it.dependencies.forEach({
//                print("dependency: ")
//                println(it.getGroup())
//            })
//        })
        dependencies.constraints({
            it.create("com.github.bumptech.glide:glide", {
                println(it.versionConstraint)
//                it.version({it.branch(null)})
            })
        })
        configurations["implementation"].setCanBeResolved(true)
        def componentIds = configurations["implementation"].incoming.resolutionResult.allDependencies.collect {
//            println(it.from.id)
            it.from.id
        }
        dependencies.getComponents()
        dependencies.modules
        def result = dependencies.createArtifactResolutionQuery()
                .forComponents(componentIds)
                .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
                .execute()
        result.resolvedComponents.forEach({
            print("resolvedComponent: ")
            println(it.id)
        })
    }
}

task resolveCompileSources {
    doLast {
        configurations["implementation"].setCanBeResolved(true)
        def componentIds = configurations["implementation"].incoming.resolutionResult.allDependencies.collect {
            it.from.id
        }
        def result = dependencies.createArtifactResolutionQuery()
                .forComponents(componentIds)
                .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
                .execute()
        for (component in result.resolvedComponents) {
            component.getArtifacts(SourcesArtifact).each {
                println "Source artifact for ${component.id}: ${it.file}"
            }
        }
    }
}

/**
 * api 编译时不隐藏依赖类
 * implementation 编译时隐藏依赖类
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api libs.appcompat
    api libs.component_extension
    api libs.component_rx_liveData

    api libs.recyclerview
    api libs.recyclerview_helper

    api libs.timber
    api libs.logger

    api libs.bugly_sdk
    api libs.bugly_ndk

    api libs.retrofit
    api libs.retrofit_gson
    api libs.retrofit_rxjava
    api libs.okhttp

    api libs.rxjava
    api libs.rxandroid
    api libs.eventbus

    api libs.glide
    annotationProcessor libs.glide_compiler

    //使用Chrome来调试Android Application的工具
    implementation libs.stetho
    implementation libs.stetho_okhttp

    implementation libs.multidex

    debugApi libs.leakcanary_debug

    testImplementation tests.junit
    testImplementation tests.mockito
    androidTestImplementation tests.runner
    androidTestImplementation tests.espresso
}
